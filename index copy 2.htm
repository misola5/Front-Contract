<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DEX Frontend</title>
    <!-- Cargar Web3.js desde CDN -->
    <script src="https://cdn.jsdelivr.net/npm/web3@1.7.6/dist/web3.min.js"></script>
</head>
<body>

    <h2>DEX Interacciones</h2>
    
    <button id="conectar">Conectar MetaMask</button>
    
    <div id="informacionUsuario">
        <p>Dirección: <span id="direccionUsuario"></span></p>
        <p>Balance de TokenA: <span id="balanceA"></span></p>
        <p>Balance de TokenB: <span id="balanceB"></span></p>
    </div>

    <div>
        <h3>Agregar Liquidez</h3>
        <label for="cantidadA">Cantidad de TokenA: </label>
        <input type="number" id="cantidadA" placeholder="Cantidad de TokenA">
        <label for="cantidadB">Cantidad de TokenB: </label>
        <input type="number" id="cantidadB" placeholder="Cantidad de TokenB">
        <button onclick="agregarLiquidez()">Agregar Liquidez</button>
    </div>

    <div>
        <h3>Intercambiar Tokens</h3>
        <label for="cantidadIntercambio">Cantidad a intercambiar (TokenA por TokenB): </label>
        <input type="number" id="cantidadIntercambio" placeholder="Cantidad de TokenA">
        <button onclick="intercambiarAporB()">Intercambiar A por B</button>

        <label for="cantidadIntercambioB">Cantidad a intercambiar (TokenB por TokenA): </label>
        <input type="number" id="cantidadIntercambioB" placeholder="Cantidad de TokenB">
        <button onclick="intercambiarBporA()">Intercambiar B por A</button>
    </div>

    <script type="module">

        import { ethers } from "https://cdnjs.cloudflare.com/ajax/libs/ethers/6.7.0/ethers.min.js";

        let web3;
        let cuenta;
        let contratoDEX;
        let tokenA;
        let tokenB;
        let provider, signer, address;

        const direccionDEX = "0xE77eB30A2745E075bbb83a54F6B7799CceC55c03"; // Dirección del contrato SimpleDEX
        const direccionTokenA = "0xF203047B80e86B79CfeA045fB598440754f314Bc"; // Dirección del contrato TokenA
        const direccionTokenB = "0x1d20C33b53565eDf63acDcFaC4d8FB85fc72d4CB"; // Dirección del contrato TokenB

        // ABI de los contratos
        const ABI_Dex = [
            // ABI para funciones del contrato SimpleDEX
            // Pega el ABI de tu contrato SimpleDEX aquí
        ];

        const ABI_Token = [
            // ABI para el contrato ERC20 (TokenA y TokenB)
            // Pega el ABI de los contratos ERC20 aquí
        ];

        // Conectar a MetaMask
        async function conectar() {
            console.log('Connecting wallet...');

            if(window.ethereum) {
              console.log('Metamask detected');

              await window.ethereum.request({ method: 'eth_requestAccounts' });
              provider = new ethers.BrowserProvider(window.ethereum);
              signer = await provider.getSigner();

              address = await signer.getAddress();
              console.log("🚀 ~ connectWallet ~ address:", address)

              document.getElementById('btnConnect').style.display = 'none';
              document.getElementById('btnDisconnect').style.display = 'inline';

              document.getElementById('status').innerText = `Estado: Conectado a la cuenta ${address}`;
              document.getElementById('erc20Balance').style.display = 'block';
              document.getElementById('ethBalance').style.display = 'block';
              document.getElementById('sendERC20Fields').style.display = 'block';
              document.getElementById('sendETHFields').style.display = 'block';
            }
            else {
              console.error('Metamask not detected');
            }
          }

        // Obtener balances de los tokens
        async function obtenerBalances() {
            tokenA = new web3.eth.Contract(ABI_Token, direccionTokenA);
            tokenB = new web3.eth.Contract(ABI_Token, direccionTokenB);

            let balanceA = await tokenA.methods.balanceOf(cuenta).call();
            let balanceB = await tokenB.methods.balanceOf(cuenta).call();

            document.getElementById("balanceA").innerText = web3.utils.fromWei(balanceA, 'ether');
            document.getElementById("balanceB").innerText = web3.utils.fromWei(balanceB, 'ether');
        }

        // Función para agregar liquidez
        async function agregarLiquidez() {
            const cantidadA = document.getElementById("cantidadA").value;
            const cantidadB = document.getElementById("cantidadB").value;

            const contrato = new web3.eth.Contract(ABI_Dex, direccionDEX);

            const cantidadAWei = web3.utils.toWei(cantidadA, 'ether');
            const cantidadBWei = web3.utils.toWei(cantidadB, 'ether');

            await tokenA.methods.approve(direccionDEX, cantidadAWei).send({ from: cuenta });
            await tokenB.methods.approve(direccionDEX, cantidadBWei).send({ from: cuenta });

            await contrato.methods.agregarLiquidez(cantidadAWei, cantidadBWei).send({ from: cuenta });
        }

        // Función para intercambiar TokenA por TokenB
        async function intercambiarAporB() {
            const cantidadA = document.getElementById("cantidadIntercambio").value;
            const cantidadAWei = web3.utils.toWei(cantidadA, 'ether');

            const contrato = new web3.eth.Contract(ABI_Dex, direccionDEX);

            await tokenA.methods.approve(direccionDEX, cantidadAWei).send({ from: cuenta });
            await contrato.methods.intercambiarAporB(cantidadAWei).send({ from: cuenta });
        }

        // Función para intercambiar TokenB por TokenA
        async function intercambiarBporA() {
            const cantidadB = document.getElementById("cantidadIntercambioB").value;
            const cantidadBWei = web3.utils.toWei(cantidadB, 'ether');

            const contrato = new web3.eth.Contract(ABI_Dex, direccionDEX);

            await tokenB.methods.approve(direccionDEX, cantidadBWei).send({ from: cuenta });
            await contrato.methods.intercambiarBporA(cantidadBWei).send({ from: cuenta });
        }

        // Evento de conexión
        document.getElementById("conectar").addEventListener("click", conectar);
    </script>

</body>
</html>
